DataFull <- Data %>%
filter(arousalCond != "BL") %>%
filter(manipCheck == "pass")
Data$ManipCheck.x
# Merge the above with the full data
Data <- left_join(Part2Merged, Merged, by = "ResponseId")
HR <- Data %>%
dplyr::select(HR_BL, HR_1A, HR_1B, HR_2A, HR_2B, ResponseId) %>%
pivot_longer(cols = contains("HR_"), names_to = "stimBlock", values_to = "HR") %>%
distinct
HR$stimBlock <- str_replace(HR$stimBlock, "HR_", "") # Take out "HR_" before each block in HR_Block column
# take out columns from original Data
Data <- Data %>%
dplyr::select(-c(HR_1A, HR_1B, HR_2A, HR_2B))
# join the HR data to Data
Data <- left_join(Data, HR, by = c("ResponseId", "stimBlock"))
# run analysis
lmer(data = Data, HR ~ arousalCond + (1|ResponseId)) %>% summary
# visualize
Data %>%
dplyr::select(ResponseId, arousalCond, stimBlock, HR) %>%
distinct() %>%
pivot_wider(names_from = arousalCond, values_from = HR) %>%
dplyr::select(ResponseId, BL, High, Low, stimBlock) %>%
distinct()
ManipulationCheck <- Data %>%
filter(arousalCond != "BL") %>%
group_by(ResponseId, arousalCond) %>%
summarise(average_HR = sum(HR, na.rm=T)/2) %>%
pivot_wider(names_from = arousalCond, values_from = average_HR) %>%
mutate(HR_diff = High - Low) %>%
mutate(manipCheck = ifelse(HR_diff > 0, "pass", "fail")) %>%  #if high - low arousal HR is positive, then put "pass" for manipCheck, otherwise "fail"
dplyr::select(ResponseId, manipCheck, HR_diff)
ggplot(ManipulationCheck, aes(x = ResponseId, y = HR_diff, color=manipCheck)) +
geom_point() +
geom_hline(yintercept = 0)
# merge manipulation check column to main Data
Data <- left_join(Data, ManipulationCheck, by = c("ResponseId"))
DataFull <- Data %>%
filter(arousalCond != "BL") %>%
filter(manipCheck == "pass")
lmer(data = DataFull, wantToDate~ arousalCond * expression + websiteCountry + attractiveHalf + (1|ResponseId) + (1|imgNum)) %>% summary
lmer(data = DataFull, wantToKiss~ arousalCond * expression + websiteCountry + attractiveHalf + (1|ResponseId) + (1|imgNum)) %>% summary
# Accounting for other factors (ExerciseEnjoy & Uncomfort_faces)
lmer(data = DataFull, wantToDate~ arousalCond * expression + websiteCountry + ExerciseEnjoy + Uncomfort_faces + (1|ResponseId) + (1|imgNum)) %>% summary
lmer(data = DataFull, wantToKiss~ arousalCond * expression + websiteCountry + ExerciseEnjoy + Uncomfort_faces + (1|ResponseId) + (1|imgNum)) %>% summary
# Only attractive faces
lmer(data = DataAttract, wantToDate~ arousalCond * expression + websiteCountry + (1|ResponseId) + (1|imgNum)) %>% summary
lmer(data = DataAttract, wantToKiss~ arousalCond * expression + websiteCountry + (1|ResponseId) + (1|imgNum)) %>% summary
# Taking out people who were suspicious
NonSus <- DataFull %>%
filter(Suspicion != 1)
lmer(data = NonSus, wantToDate~ arousalCond * expression + websiteCountry + ExerciseEnjoy + (1|ResponseId) + (1|imgNum)) %>% summary
lmer(data = NonSus, wantToKiss~ arousalCond * expression + websiteCountry + ExerciseEnjoy + (1|ResponseId) + (1|imgNum)) %>% summary
lmer(data = DataFull, wantToDate~ arousalCond * expression + websiteCountry + attractiveHalf + (1|ResponseId) + (1|imgNum)) %>% summary
lmer(data = DataFull, wantToKiss~ arousalCond * expression + websiteCountry + attractiveHalf + (1|ResponseId) + (1|imgNum)) %>% summary
# run analysis
lmer(data = Data, HR ~ arousalCond + (1|ResponseId)) %>% summary
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenSONA <- fetch_survey(surveyID = "SV_87dBMdfT4vSZ2QJ", force_request = TRUE)
write.csv(prescreenSONA, file = "./prescreenSONA.csv")
Invited<- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenSONA)[1]
prescreenSONA <- prescreenSONA[3:N,] #Take out what we know are test trials
prescreenSONA <- prescreenSONA %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenSONA <- prescreenSONA[!prescreenSONA$Email %in% Invited$Email, , drop = FALSE]
prescreenSONA
write.csv(prescreenSONA, file = "New Wave SONA Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
Part1 <- fetch_survey(surveyID = "SV_3l4t9MW4CV7KelD", force_request = TRUE)
write.csv(Part1, file = "../data/Part1.csv")
#Exclude Part1 pilot data
N <- dim(Part1)[1]
Part1 <- Part1[3:N,] #Take out what we know are test trials
# Make sure full survey filled out
Part1 <- Part1 %>%
filter(Progress == 100)
Part2 <- fetch_survey(surveyID = "SV_5hwnhPYLIDiEgBL", force_request = TRUE)
write.csv(Part2, file = "../data/Part2.csv")
# Make sure full survey filled out
Part2 <- Part2 %>%
filter(Progress == 100)
#Identify duplicate email entries and remove first entry of duplicates in code chunk above
Part1$Email1[duplicated(Part1$Email1)] #Part 1
Part2$Email2[duplicated(Part2$Email2)] #Part 2
#Identify duplicate pID entries and remove first entry of duplicates in code chunk above (if necessary)
Part1$pID1[duplicated(Part1$pID1)] #Part 1
Part2$pID2[duplicated(Part2$pID2)] #Part 2
#Convert emails and welcome code to character in order to perform operation below
Part2$Email2 <- as.character(Part2$Email2)
Part1$Email1 <- as.character(Part1$Email1)
#Manually replace Part 1 email with matching email from Part 2
Part1$Email1[Part1$Email1 == "crparker@stanford.edu"] <- "crparkerman@gmail.com"
Part1$Email1[Part1$Email1 == "Jj16pett@Siena.edu"] <- "jj16pett@siena.edu"
#Make list of participants who matched emails
PaymentEligible <- Part1[Part1$Email1 %in% Part2$Email2, , drop = FALSE]
PaymentEligible <- left_join(PaymentEligible, Part2, by = c("Email1" = "Email2"))
PaymentEligible <- PaymentEligible %>%
dplyr::select(Email1, pID1, pID2)
#***CHECK EVERY ITERATION***
#Look at whether participants who didn't match on Emails match on pID, and then if they do match on pID, compare their Emails
EmailNoMatchPart1 <- Part1[!Part1$Email1 %in% Part2$Email2, , drop = FALSE] #Extract those from Part 1 that didn't match on Email
EmailNoMatchPart2 <- Part2[!Part2$Email2 %in% Part1$Email1, , drop = FALSE] #Extract those from Part 2 that didn't match on Email
pIDMatch <- EmailNoMatchPart1[EmailNoMatchPart1$pID1 %in% EmailNoMatchPart2$pID2, , drop = FALSE] #Extract those in the above group that DO however match on pID given in Part 1 and Part 2
Part2MatchingpIDs <- Part2 %>%
dplyr::select(pID2, Email2) #Extract just pID and email from Part 2
left_join(pIDMatch, Part2MatchingpIDs, by = c("pID1" = "pID2")) %>% select(Email1, Email2, pID1) #For people who DIDN'T enter consistent Emails but DID enter consistent pIDs across Part 1 and Part 2, make a new dataframe to directly compare their Part 1 Email to their Part 2 Email to see how close they were.
#Resolve these differences here and fix them above (so they don't show up again)
EmailNoMatchPart1
EmailNoMatchPart1$Email1
EmailNoMatchPart2$Email2
#Take out any potential duplicates in final list
PaymentEligible <- PaymentEligible %>%
dplyr::distinct()
#Filter out only participants who haven't yet been paid
AlreadyPaid <- read.csv("./Have Been Paid.csv")
NewWavePayment <- PaymentEligible[!PaymentEligible$Email1 %in% AlreadyPaid$Email1, , drop = FALSE] #Extract those in the Payment Eligible list that aren't in the Already Paid list (Email1) based on email
NewWavePayment <- NewWavePayment[!NewWavePayment$Email1 %in% AlreadyPaid$Email2, , drop = FALSE] #Extract those in the Payment Eligible list that aren't in the Already Paid list (Email2) based on email
write.csv(NewWavePayment, file = "./Week3.csv")
write.csv(NewWavePayment, file = "./Week4.csv")
Part1$Email1 <- str_to_lower(Part1$Email1)
Part2$Email2 <- str_to_lower(Part2$Email2)
#Identify duplicate email entries and remove first entry of duplicates in code chunk above
Part1$Email1[duplicated(Part1$Email1)] #Part 1
Part2$Email2[duplicated(Part2$Email2)] #Part 2
#Identify duplicate pID entries and remove first entry of duplicates in code chunk above (if necessary)
Part1$pID1[duplicated(Part1$pID1)] #Part 1
Part2$pID2[duplicated(Part2$pID2)] #Part 2
#Convert emails and welcome code to character in order to perform operation below
Part2$Email2 <- as.character(Part2$Email2)
Part1$Email1 <- as.character(Part1$Email1)
#Manually replace Part 1 email with matching email from Part 2
Part1$Email1[Part1$Email1 == "crparker@stanford.edu"] <- "crparkerman@gmail.com"
Part1$Email1[Part1$Email1 == "Jj16pett@Siena.edu"] <- "jj16pett@siena.edu"
Part1 <- fetch_survey(surveyID = "SV_3l4t9MW4CV7KelD", force_request = TRUE)
write.csv(Part1, file = "../data/Part1.csv")
#Exclude Part1 pilot data
N <- dim(Part1)[1]
Part1 <- Part1[3:N,] #Take out what we know are test trials
# Make sure full survey filled out
Part1 <- Part1 %>%
filter(Progress == 100)
Part2 <- fetch_survey(surveyID = "SV_5hwnhPYLIDiEgBL", force_request = TRUE)
write.csv(Part2, file = "../data/Part2.csv")
# Make sure full survey filled out
Part2 <- Part2 %>%
filter(Progress == 100)
Part1$Email1 <- str_to_lower(Part1$Email1)
Part2$Email2 <- str_to_lower(Part2$Email2)
#Identify duplicate email entries and remove first entry of duplicates in code chunk above
Part1$Email1[duplicated(Part1$Email1)] #Part 1
Part2$Email2[duplicated(Part2$Email2)] #Part 2
#Identify duplicate pID entries and remove first entry of duplicates in code chunk above (if necessary)
Part1$pID1[duplicated(Part1$pID1)] #Part 1
Part2$pID2[duplicated(Part2$pID2)] #Part 2
Part2$Email2 <- as.character(Part2$Email2)
Part1$Email1 <- as.character(Part1$Email1)
#Manually replace Part 1 email with matching email from Part 2
Part1$Email1[Part1$Email1 == "crparker@stanford.edu"] <- "crparkerman@gmail.com"
Part1$Email1 == "Jj16pett@Siena.edu"
Part1$Email1[Part1$Email1 == "Jj16pett@Siena.edu"]
Part1$Email1[Part1$Email1 == "jj16pett@siena.edu"]
#Make list of participants who matched emails
PaymentEligible <- Part1[Part1$Email1 %in% Part2$Email2, , drop = FALSE]
PaymentEligible <- left_join(PaymentEligible, Part2, by = c("Email1" = "Email2"))
PaymentEligible <- PaymentEligible %>%
dplyr::select(Email1, pID1, pID2)
EmailNoMatchPart1 <- Part1[!Part1$Email1 %in% Part2$Email2, , drop = FALSE] #Extract those from Part 1 that didn't match on Email
EmailNoMatchPart2 <- Part2[!Part2$Email2 %in% Part1$Email1, , drop = FALSE] #Extract those from Part 2 that didn't match on Email
pIDMatch <- EmailNoMatchPart1[EmailNoMatchPart1$pID1 %in% EmailNoMatchPart2$pID2, , drop = FALSE] #Extract those in the above group that DO however match on pID given in Part 1 and Part 2
Part2MatchingpIDs <- Part2 %>%
dplyr::select(pID2, Email2) #Extract just pID and email from Part 2
left_join(pIDMatch, Part2MatchingpIDs, by = c("pID1" = "pID2")) %>% select(Email1, Email2, pID1) #For people who DIDN'T enter consistent Emails but DID enter consistent pIDs across Part 1 and Part 2, make a new dataframe to directly compare their Part 1 Email to their Part 2 Email to see how close they were.
#Take out any potential duplicates in final list
PaymentEligible <- PaymentEligible %>%
dplyr::distinct()
#Filter out only participants who haven't yet been paid
AlreadyPaid <- read.csv("./Have Been Paid.csv")
NewWavePayment <- PaymentEligible[!PaymentEligible$Email1 %in% AlreadyPaid$Email1, , drop = FALSE] #Extract those in the Payment Eligible list that aren't in the Already Paid list (Email1) based on email
NewWavePayment <- NewWavePayment[!NewWavePayment$Email1 %in% AlreadyPaid$Email2, , drop = FALSE] #Extract those in the Payment Eligible list that aren't in the Already Paid list (Email2) based on email
write.csv(NewWavePayment, file = "./Week4.csv")
#Take out any potential duplicates in final list
PaymentEligible <- PaymentEligible %>%
dplyr::distinct()
#Filter out only participants who haven't yet been paid
AlreadyPaid <- read.csv("./Have Been Paid.csv")
AlreadyPaid$Email1 <- str_to_lower(AlreadyPaid$Email1) # make all lowercase
AlreadyPaid$Email2 <- str_to_lower(AlreadyPaid$Email2) # make all lowercase
NewWavePayment <- PaymentEligible[!PaymentEligible$Email1 %in% AlreadyPaid$Email1, , drop = FALSE] #Extract those in the Payment Eligible list that aren't in the Already Paid list (Email1) based on email
NewWavePayment <- NewWavePayment[!NewWavePayment$Email1 %in% AlreadyPaid$Email2, , drop = FALSE] #Extract those in the Payment Eligible list that aren't in the Already Paid list (Email2) based on email
write.csv(NewWavePayment, file = "./Week4.csv")
# Make sure no participant left behind
Part1 <- read.csv("../data/Part1.csv") #reload Part 1
# Make sure d$Email2 is empty
d<- Part2[!Part2$Email2 %in% PaymentEligible$Email1, , drop = FALSE]
d$Email2
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenSONA <- fetch_survey(surveyID = "SV_87dBMdfT4vSZ2QJ", force_request = TRUE)
write.csv(prescreenSONA, file = "./prescreenSONA.csv")
Invited<- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenSONA)[1]
prescreenSONA <- prescreenSONA[3:N,] #Take out what we know are test trials
prescreenSONA <- prescreenSONA %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenSONA <- prescreenSONA[!prescreenSONA$Email %in% Invited$Email, , drop = FALSE]
prescreenSONA
write.csv(prescreenSONA, file = "New Wave SONA Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
library(tidyverse)
#devtools::install_github("JasperHG90/qualtRics")
#remotes::install_github("ropensci/qualtRics")
library(qualtRics)
#qualtrics_api_credentials(api_key = "Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks", base_url = "stanforduniversity.ca1.qualtrics.com", install = TRUE, overwrite=TRUE)
# API token = Tlov4OE03zLupU2ZGliP0rVuvSbxLbynL9o7qmks
# base url = stanforduniversity.ca1.qualtrics.com/
prescreenGeneral <- fetch_survey(surveyID = "SV_5yWFFg4OApuiulD", force_request = TRUE)
write.csv(prescreenGeneral, file = "./prescreenGeneral.csv")
Invited <- read.csv("Participation Invite Sent.csv")
#Exclude prescreen pilot data
N <- dim(prescreenGeneral)[1]
prescreenGeneral <- prescreenGeneral[2:N,] #Take out what we know are test trials
prescreenGeneral <- prescreenGeneral %>%
dplyr::select(Email:HealthStatus) %>% # select only relevant cols
filter(Ethnicity_1 == "White/Caucasian/European American" & is.na(Ethnicity_2) & is.na(Ethnicity_3) & is.na(Ethnicity_4) & is.na(Ethnicity_5) & is.na(Ethnicity_6) & is.na(Ethnicity_7) & is.na(Ethnicity_8)) %>%  # make sure only Eur American selected
filter(Gender == "Male") %>%
filter(Age >= 19 & Age <= 26) %>%
filter(SexualOrientation == "Heterosexual" | SexualOrientation == "Bisexual") %>%
filter(Born == "Yes") %>% # born in US
filter((Mother_Born == "Yes" | Mother_Born_text == "Canada" | Mother_Born_text == "canada") & Mother_White == "Yes") %>%
filter((Father_Born == "Yes" | Father_Born_text == "Canada" | Father_Born_text == "canada") & Father_White == "Yes") %>%
filter(ZoomUse == "Yes") %>%
filter(EnvironAppropriate == "Yes") %>%
filter(HealthStatus == "No")
#Exclude these emails from the existing list in Prescreen
prescreenGeneral <- prescreenGeneral[!prescreenGeneral$Email %in% Invited$Email, , drop = FALSE]
prescreenGeneral
write.csv(prescreenGeneral, file = "New Wave General Prescreen.csv")
